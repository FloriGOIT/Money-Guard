{"version":3,"file":"static/js/207.1d1f1200.chunk.js","mappings":"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","sources":["components/BigButtonsContainer.jsx","components/NewCoin.jsx"],"sourcesContent":["import style from './moneyGuard.module.scss';\nimport { Link } from 'react-router-dom';\n\n\n\nconst BigButtonsContainer = ({ firstBtn, secondBtn, handleSubmit }) => {\n  const returnLocation = \"/currency\";\n  return (\n    <>\n      <button\n        className={`${style.bigButton} ${style.selectedBtn}`}\n      >\n      {firstBtn}  \n      </button>\n\n      <Link to={returnLocation} className={`${style.bigButton} ${style.notSelectedBtn}`}>\n        {secondBtn} \n      </Link>\n    </>\n  );\n};\n\nexport default BigButtonsContainer;\n","import style from './moneyGuard.module.scss';\nimport BigButtonsContainer from './BigButtonsContainer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\n\n\nconst NewCoin = ({origin}) => {\n  const [isCurrency, setIsCurrency] = useState({\n    id:nanoid(),\n    currencyName: '',\n    nbrRate: \"\",\n    buyRate: \"\",\n    sellRate: \"\",\n  });\n\n  const navigate = useNavigate();\n  const param = useParams().name;\n\n  useEffect(() => {\n\n     const localStorageArr = JSON.parse(localStorage.getItem(\"moneyGuardCurrency\"));\n    if (param) {\n      const newCurrency = localStorageArr.find(c => c.currencyName === param);\n      if (newCurrency) setIsCurrency(newCurrency);\n    }\n  }, [param]);\n\n  console.log(\"isCurrency\",isCurrency)\n\n  const handleSubmit = e => {\n\n    e.preventDefault();\n\n    const localStorageArr = JSON.parse(localStorage.getItem(\"moneyGuardCurrency\"));\n\n    if (!param){const checkDuplicateCurrency = localStorageArr.find(c => c.currencyName === isCurrency.currencyName);\n    if (checkDuplicateCurrency) {\n      alert(\"This currency is already available. Enter other name or cancel request.\"); return\n    }}\n\n    const index = localStorageArr.findIndex(c => c.id === isCurrency.id);\n    console.log(\"index\",index)\n    if (index !== -1) {\n      localStorageArr[index] = isCurrency;\n    } else {\n      localStorageArr.push(isCurrency); \n    };\n\n    localStorage.setItem(\"moneyGuardCurrency\", JSON.stringify(localStorageArr))\n\n    setIsCurrency({\n      id:nanoid(),\n      currencyName: '',\n      nbrRate: '',\n      buyRate: '',\n      sellRate: '',\n    });\n\n    navigate(origin);\n  };\n\n  return (\n    <section className={style.newCoinWrapper}>\n      <div className={style.newCoinContainer}>\n        <form className={style.newCoinForm} onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"currencyName\"\n            pattern=\"^[A-Za-z]{3}$\"\n            title=\"Enter exactly 3 letters.Example: USD, RON, EUR\"\n            value={isCurrency.currencyName}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Currency name\"\n            onChange={e =>\n              setIsCurrency(prev => ({\n                ...prev,\n                currencyName: e.target.value.toUpperCase(),\n              }))\n            }\n          />\n          <input\n            type=\"text\"\n            name=\"nbrRate\"\n            pattern=\"^\\d+(\\.\\d{1,4})?$\"\n            title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n            value={isCurrency.nbrRate}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Central bank rate\"\n            onChange={e =>\n              setIsCurrency(prev => ({ ...prev, nbrRate: e.target.value }))\n            }\n          />\n          <input\n            type=\"text\"\n            name=\"buyRate\"\n            pattern=\"^\\d+(\\.\\d{1,4})?$\"\n            title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n            value={isCurrency.buyRate}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Buy rate\"\n            onChange={e =>\n              setIsCurrency(prev => ({ ...prev, buyRate: e.target.value }))\n            }\n          />\n          <input\n            type=\"text\"\n            name=\"sellRate\"\n            pattern=\"^\\d+(\\.\\d{1,4})?$\"\n            title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n            value={isCurrency.sellRate}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Sell rate\"\n            onChange={e =>\n              setIsCurrency(prev => ({ ...prev, sellRate: e.target.value }))\n            }\n          />\n          <div className={style.newCoinFormButtons}>\n            <BigButtonsContainer firstBtn={param? \"Update\" : \"Add\"} secondBtn=\"Close\" />\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default NewCoin;\n\n/*\n    const checkDuplicateCurrency = currency.find(currency => currency.currencyName === isCurrency.currencyName);\n    if (checkDuplicateCurrency) {\n      alert(\"This currency is already available. Enter other name or cancel request.\"); return\n    }\n*/\n"],"names":["_ref","firstBtn","secondBtn","handleSubmit","_jsxs","_Fragment","children","_jsx","className","concat","style","Link","to","origin","_useState","useState","id","nanoid","currencyName","nbrRate","buyRate","sellRate","_useState2","_slicedToArray","isCurrency","setIsCurrency","navigate","useNavigate","param","useParams","name","useEffect","localStorageArr","JSON","parse","localStorage","getItem","newCurrency","find","c","console","log","onSubmit","e","preventDefault","alert","index","findIndex","push","setItem","stringify","type","pattern","title","value","required","autoComplete","placeholder","onChange","prev","_objectSpread","target","toUpperCase","BigButtonsContainer"],"sourceRoot":""}