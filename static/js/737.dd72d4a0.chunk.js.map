{"version":3,"file":"static/js/737.dd72d4a0.chunk.js","mappings":"oPAsOA,UA3NgB,SAAHA,GAAkB,IAAZC,EAAID,EAAJC,KAEjBC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAoDL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5DE,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAChDG,GAAgCT,EAAAA,EAAAA,UAAS,qBAAoBU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAtDE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAA4Bb,EAAAA,EAAAA,UAASc,EAAAA,IAAMC,GAAAb,EAAAA,EAAAA,GAAAW,EAAA,GAApCG,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAgClB,EAAAA,EAAAA,UAAS,IAAGmB,GAAAjB,EAAAA,EAAAA,GAAAgB,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAkCtB,EAAAA,EAAAA,UAAS,IAAGuB,GAAArB,EAAAA,EAAAA,GAAAoB,EAAA,GAAvCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA8B1B,EAAAA,EAAAA,UAAS,IAAG2B,GAAAzB,EAAAA,EAAAA,GAAAwB,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,GAAWC,EAAAA,EAAAA,MAGXC,EADiBC,EAAAA,GAAAA,QAAc,SAAAC,GAAK,OAAIA,EAAMC,SAAWnB,EAAOoB,MAAM,KAAK,EAAE,IAChD,GAAGC,KAC5BC,EAAc,CACpBC,IAAIC,EAAAA,EAAAA,MACFC,KAAMzB,EACN0B,KAAM1B,EAAOoB,MAAM,KAAK,GAC1BF,MAAMF,EACNW,KAAMxC,EACNyC,SAAUjC,EACVkC,QAASrB,EACPsB,OAAQ1B,EACV2B,MAAMnB,GAGFW,GAAOS,EAAAA,EAAAA,MAAPT,GAEFU,EAAenD,EAAKoD,MAAK,SAAAC,GAAI,OAAIA,EAAKZ,KAAOA,CAAE,KAErDa,EAAAA,EAAAA,YAAU,WAAUH,IAElB7C,EAAa6C,EAAaN,MAC1B/B,EAAYqC,EAAaL,UACzB3B,EAAUgC,EAAaR,MACvBpB,EAAY4B,EAAaH,QACzBrB,EAAawB,EAAaJ,SAC1BhB,EAAWoB,EAAaF,OACzB,GAAE,CAACE,IAGJ,IAAII,EAAclD,EAAYmD,EAAAA,GAAcC,EAAAA,GACtCC,EAAcjD,GAAqBkD,EAAAA,EAAAA,KAACC,EAAAA,IAAW,KAAMD,EAAAA,EAAAA,KAACE,EAAAA,IAAW,IAqDvE,OACEF,EAAAA,EAAAA,KAAA,WAASG,UAAWC,EAAAA,EAAAA,eAAqBC,UACvCC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,EAAAA,iBAAuBC,SAAA,EACrCL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,qBAEJC,EAAAA,EAAAA,MAAA,QAAMH,UAAWC,EAAAA,EAAAA,YAAmBG,SAvCpB,SAACC,GACrBA,EAAEC,iBACF,IAAMC,EAAQrE,EAAKsE,WAAU,SAAAjB,GAAI,OAAEA,EAAKZ,KAAKA,CAAE,IAC3CA,GAAMzC,EAAKuE,OAAOF,EAAO,GAGZ,sBAAbxD,EAKa,KAAbS,EAIAkD,OAAOhC,EAAYI,MAAQ,KAAQ6B,MAAM,oDAC9B,IAAXJ,EAAgBrE,EAAKqE,GAAS7B,EAC7BxC,EAAK0E,KAAKlC,GAEfmC,aAAaC,QAAQ,YAAaC,KAAKC,UAAU9E,IACjDM,GAAa,GACbI,GAAsB,GACtBI,EAAY,qBACZK,EAAUH,EAAAA,IACVO,EAAY,IACZI,EAAa,IACbI,EAAW,IAGbC,EAAS,MAjBLyC,MAAM,uCALNA,MAAM,6CAyBV,EAOkET,SAAA,EAC1DC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,EAAAA,cAAoBC,SAAA,EAClCL,EAAAA,EAAAA,KAAA,QAAMI,MAAO,CAAEd,MAAO5C,EAAY,QAAU,sBAAuB2D,SAAC,YAGpEC,EAAAA,EAAAA,MAAA,SAAOH,UAAWC,EAAAA,EAAAA,OAAaC,SAAA,EAC7BL,EAAAA,EAAAA,KAAA,SACEd,KAAK,WACLN,KAAK,gBACLwC,QAAS1E,EACT2E,SAlEO,WACnB1E,GAAa,SAAA2E,GAAI,OAAKA,CAAI,IAC1BnE,EAAY,oBACd,EAgEcoE,aAAa,SAEfvB,EAAAA,EAAAA,KAAA,QAAMG,UAAS,GAAAqB,OAAKpB,EAAAA,EAAAA,OAAY,KAAAoB,OAAIpB,EAAAA,EAAAA,aAEtCJ,EAAAA,EAAAA,KAAA,QAAMI,MAAO,CAAEd,MAAO5C,EAAY,mBAAqB,SAAU2D,SAAC,gBAKpEC,EAAAA,EAAAA,MAAA,OAAKH,UAAS,GAAAqB,OAAKpB,EAAAA,EAAAA,eAAoB,KAAAoB,OAAIpB,EAAAA,EAAAA,mBAA0BC,SAAA,EACnEL,EAAAA,EAAAA,KAAA,SACEd,KAAK,OACLuC,MAAOvE,EACPwE,UAAQ,EACR9C,KAAK,kBACLwB,MAAO,CAAEd,MAAoB,sBAAbpC,EAAmC,6BAA+B,SAClFqE,aAAa,SAEfvB,EAAAA,EAAAA,KAAA,UACE2B,QAlFmB,SAAAnB,GAC7BA,EAAEC,iBACF1D,GAAsB,SAAAuE,GAAI,OAAKA,CAAI,GACrC,EAgFYnB,UAAWC,EAAAA,EAAAA,oBAA0BC,SAEpCN,OAIJjD,GACCkD,EAAAA,EAAAA,KAAA,MAAIG,UAAWC,EAAAA,EAAAA,YAAkBC,SAC9BT,EAAYgC,KAAI,SAAAzC,GAAQ,OACvBa,EAAAA,EAAAA,KAAA,MAEEyB,MAAOtC,EAASD,KAAK2C,cACrB1B,UAAWC,EAAAA,EAAAA,cACXuB,QAAS,kBA5FJ,SAAAG,GACnB3E,EAAY2E,GACZ,IAAMC,EAAgBC,EAAAA,GAAAA,MAAmB,SAAA7C,GAAQ,OAAIA,EAASD,OAAS4C,CAAK,IAC5E1D,EAAW2D,EAAczC,OACzBvC,GAAsB,SAAAuE,GAAI,OAAKA,CAAI,GACrC,CAuF+BW,CAAa9C,EAASD,KAAK,EAACmB,UAE3CL,EAAAA,EAAAA,KAAA,SACEd,KAAK,OACLN,KAAMO,EAASD,KACfuC,MAAOtC,EAASD,KAChBwC,UAAQ,EACRH,aAAa,MACbW,UAAQ,EACR/B,UAAuC,GAAAqB,OAA3B9E,EAAmC0D,EAAAA,EAAAA,QAApBA,EAAAA,EAAAA,WAZxBjB,EAASD,KAcX,MAGP,MAEJoB,EAAAA,EAAAA,MAAA,OACEH,UAAS,GAAAqB,OAAKpB,EAAAA,EAAAA,eAAoB,KAAAoB,OAAIpB,EAAAA,EAAAA,wBAA+BC,SAAA,EAErEL,EAAAA,EAAAA,KAAA,SACEG,UAAWC,EAAAA,EAAAA,OACXlB,KAAK,OACLN,KAAK,SACLuD,QAAQ,uBACRV,MAAO9D,EACPyE,MAAM,6EACNC,YAAY,OACZH,UAAQ,EACRX,aAAa,MACbF,SAAU,SAAAb,GAAC,OAAE5C,EAAY4C,EAAE8B,OAAOb,MAAM,KAE1CzB,EAAAA,EAAAA,KAAA,SACEd,KAAK,OACLN,KAAK,cACLuB,UAAWC,EAAAA,EAAAA,KACXiB,SAAU,SAAAb,GAAC,OAAIhD,EAAUgD,EAAE8B,OAAOb,MAAM,EACxCF,aAAa,YAIjBvB,EAAAA,EAAAA,KAAA,OAAKG,UAAS,GAAAqB,OAAKpB,EAAAA,EAAAA,eAAoB,KAAAoB,OAAIpB,EAAAA,EAAAA,kBAAyBC,UAClEL,EAAAA,EAAAA,KAAA,SACEd,KAAK,OACLN,KAAK,UACLuB,UAAWC,EAAAA,EAAAA,QACXqB,MAAO1D,EACPsE,YAAY,IACZd,aAAa,MACZF,SAAU,SAAAb,GAAC,OAAExC,EAAawC,EAAE8B,OAAOb,MAAM,OAI9CnB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,EAAAA,eAAqBC,SAAA,EAEjCL,EAAAA,EAAAA,KAAA,UACEd,KAAK,SACLiB,UAAS,GAAAqB,OAAKpB,EAAAA,EAAAA,UAAe,KAAAoB,OAAIpB,EAAAA,EAAAA,aAAoBC,SACtD,SAIHL,EAAAA,EAAAA,KAACuC,EAAAA,GAAI,CACHC,GAAG,IACHrC,UAAS,GAAAqB,OAAKpB,EAAAA,EAAAA,UAAe,KAAAoB,OAAIpB,EAAAA,EAAAA,gBAAuBC,SACzD,qBAUb,C","sources":["pages/NewCard.jsx"],"sourcesContent":["import style from '../components/moneyGuard.module.scss';\nimport {useEffect, useState } from 'react';\nimport { mainIncomes, mainExpenses,allCategories } from 'helpers/categories';\nimport { FaAngleDown } from 'react-icons/fa6';\nimport { FaChevronUp } from 'react-icons/fa';\nimport { Link,useParams } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { today,months } from \"../helpers/timeInfo\";\n\n\nconst NewCard = ({ info }) => {\n\n  const [isExpense, setIsExpense] = useState(false);\n  const [isListCategoriesOn, setIsListCategoriesOn] = useState(false);\n  const [isOption, setIsOption] = useState('Select a category');\n  const [isDate, setIsDate] = useState(today);\n  const [isAmount, setIsAmount] = useState(\"\");\n  const [isDetails, setIsDetails] = useState(\"\");\n  const [isColor, setIsColor] = useState(\"\")\n  const navigate = useNavigate();\n\n  const monthPreLether = months.filter(month => month.number === isDate.split(\"-\")[1] );\n  const monthLether = monthPreLether[0].name;\n      const defaultCard = {\n      id: nanoid(),\n        date: isDate,\n        year: isDate.split(\"-\")[0],\n      month:monthLether,\n      type: isExpense,\n      category: isOption,\n      details: isDetails,\n        amount: isAmount,\n      color:isColor\n      }\n\n  const { id } = useParams();\n  \n  const selectedCard = info.find(card => card.id === id);\n\n  useEffect(()=>{ if (selectedCard) {\n    \n    setIsExpense(selectedCard.type); \n    setIsOption(selectedCard.category);\n    setIsDate(selectedCard.date);\n    setIsAmount(selectedCard.amount);\n    setIsDetails(selectedCard.details);\n    setIsColor(selectedCard.color)\n  }},[selectedCard])\n \n\n  let arrCategory = isExpense ? mainExpenses: mainIncomes ;\n  const buttonArrow = isListCategoriesOn ? <FaChevronUp /> : <FaAngleDown />;\n\n  const handleToggle = () => {\n    setIsExpense(prev => !prev);\n    setIsOption('Select a category');\n  };\n  const handleSelectedCategory = e => {\n    e.preventDefault();\n    setIsListCategoriesOn(prev => !prev);\n  };\n  const handleOption = input => {\n    setIsOption(input);\n    const identifyColor = allCategories.find(category => category.type === input)\n    setIsColor(identifyColor.color)\n    setIsListCategoriesOn(prev => !prev);\n  };\n\n\n  \n  const submitNewCard = (e) => {\n    e.preventDefault();\n    const index = info.findIndex(card=>card.id===id)\n    if (id) { info.splice(index, 1); }\n\n\n    if (isOption === 'Select a category') {\n      alert(\"Please select a type of income or expense.\");\n      return;\n    }\n\n    if (isAmount === '') {\n      alert(\"Please add a value higher than 0.00\");\n      return;\n    }\n    if (Number(defaultCard.year) < 2020) { alert(\"Please enter a date that starts with year 2020\"); return }\n    if (index !== -1) { info[index] = defaultCard }\n    else{info.push(defaultCard);}\n    \n    localStorage.setItem(\"listCards\", JSON.stringify(info))\n    setIsExpense(false);\n    setIsListCategoriesOn(false);\n    setIsOption('Select a category');\n    setIsDate(today);\n    setIsAmount(\"\");\n    setIsDetails(\"\");\n    setIsColor(\"\")\n\n\n  navigate(\"/\")\n \n    \n  };\n\n  return (\n    <section className={style.newCardWrapper}>\n      <div className={style.newCardContainer}>\n        <h2>Add transaction</h2>\n        \n        <form className={style.newCardForm} onSubmit={submitNewCard}>\n          <div className={style.newCardToggle}>\n            <span style={{ color: isExpense ? 'white' : 'rgb(194, 240, 126)' }}>\n              Income\n            </span>\n            <label className={style.switch}>\n              <input\n                type=\"checkbox\"\n                name=\"toggleNewCard\"\n                checked={isExpense}\n                onChange={handleToggle}\n                autoComplete=\"off\"\n              />\n              <span className={`${style.slider} ${style.round}`}></span>\n            </label>\n            <span style={{ color: isExpense ? 'rgb(211, 76, 76)' : 'white' }}>\n              Expense\n            </span>\n          </div>\n\n          <div className={`${style.rowFormNewCard} ${style.categorySelection}`}>\n            <input\n              type=\"text\"\n              value={isOption}\n              readOnly\n              name=\"selectAcategory\"\n              style={{ color: isOption === 'Select a category' ? \"rgba(206, 204, 204, 0.664)\" : \"white\" }}\n              autoComplete=\"off\"\n            />\n            <button\n              onClick={handleSelectedCategory}\n              className={style.rowFormNewCardElem2}\n            >\n              {buttonArrow}\n            </button>\n          </div>\n\n          {isListCategoriesOn ? (\n            <ul className={style.newCardList}>\n              {arrCategory.map(category => (\n                <li\n                  key={category.type}\n                  value={category.type.toLowerCase()}\n                  className={style.newCardOption }\n                  onClick={() => handleOption(category.type)}\n                >\n                  <input\n                    type=\"text\"\n                    name={category.type}\n                    value={category.type}\n                    readOnly\n                    autoComplete=\"off\"\n                    required\n                    className={!isExpense ? `${style.income}` : `${style.expense}`}\n                  />\n                </li>\n              ))}\n            </ul>\n          ) : null}\n\n          <div\n            className={`${style.rowFormNewCard} ${style.amountAndDateSelection}`}\n          >\n            <input\n              className={style.amount}\n              type=\"text\"\n              name=\"amount\"\n              pattern=\"^\\d+(\\.\\d{1,2})?$\"\n              value={isAmount}\n              title=\"Enter an amount highet than 0, that has the followig format 5, 5.5 or 5.00\"\n              placeholder=\"0.00\"\n              required\n              autoComplete=\"off\"\n              onChange={e=>setIsAmount(e.target.value)}\n            />\n            <input\n              type=\"date\"\n              name=\"dateNewCard\"\n              className={style.date}\n              onChange={e => setIsDate(e.target.value)}\n              autoComplete=\"off\"\n            />\n          </div>\n\n          <div className={`${style.rowFormNewCard} ${style.commentSelection}`}>\n            <input\n              type=\"text\"\n              name=\"comment\"\n              className={style.comment}\n              value={isDetails}\n              placeholder=\"-\"\n              autoComplete=\"off\"\n               onChange={e=>setIsDetails(e.target.value)}\n            />\n          </div>\n\n          <div className={style.newCardButtons}>\n\n              <button\n                type=\"submit\"\n                className={`${style.bigButton} ${style.selectedBtn}`}\n              >Add\n              </button>\n\n\n            <Link\n              to=\"/\"\n              className={`${style.bigButton} ${style.notSelectedBtn}`}\n            >\n              Cancel\n            </Link>\n          </div>\n        </form>\n      \n      \n      </div>\n    </section>\n  );\n};\n\nexport default NewCard;\n\n/*\n\n\n*/\n"],"names":["_ref","info","_useState","useState","_useState2","_slicedToArray","isExpense","setIsExpense","_useState3","_useState4","isListCategoriesOn","setIsListCategoriesOn","_useState5","_useState6","isOption","setIsOption","_useState7","today","_useState8","isDate","setIsDate","_useState9","_useState10","isAmount","setIsAmount","_useState11","_useState12","isDetails","setIsDetails","_useState13","_useState14","isColor","setIsColor","navigate","useNavigate","monthLether","months","month","number","split","name","defaultCard","id","nanoid","date","year","type","category","details","amount","color","useParams","selectedCard","find","card","useEffect","arrCategory","mainExpenses","mainIncomes","buttonArrow","_jsx","FaChevronUp","FaAngleDown","className","style","children","_jsxs","onSubmit","e","preventDefault","index","findIndex","splice","Number","alert","push","localStorage","setItem","JSON","stringify","checked","onChange","prev","autoComplete","concat","value","readOnly","onClick","map","toLowerCase","input","identifyColor","allCategories","handleOption","required","pattern","title","placeholder","target","Link","to"],"sourceRoot":""}