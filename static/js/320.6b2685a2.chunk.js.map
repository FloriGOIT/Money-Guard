{"version":3,"file":"static/js/320.6b2685a2.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","../node_modules/nanoid/url-alphabet/index.js","components/BigButtonsContainer.jsx","components/NewCoin.jsx"],"sourcesContent":["/* @ts-self-types=\"./index.d.ts\" */\nimport { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step | 0\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size | 0, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array((size |= 0)))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import style from './moneyGuard.module.scss';\nimport { Link } from 'react-router-dom';\n\n\n\nconst BigButtonsContainer = ({ firstBtn, secondBtn, handleSubmit }) => {\n  const returnLocation = \"/currency\";\n  return (\n    <>\n      <button\n        className={`${style.bigButton} ${style.selectedBtn}`}\n      >\n      {firstBtn}  \n      </button>\n\n      <Link to={returnLocation} className={`${style.bigButton} ${style.notSelectedBtn}`}>\n        {secondBtn} \n      </Link>\n    </>\n  );\n};\n\nexport default BigButtonsContainer;\n","import style from './moneyGuard.module.scss';\nimport BigButtonsContainer from './BigButtonsContainer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\n\n\nconst NewCoin = ({origin}) => {\n  const [isCurrency, setIsCurrency] = useState({\n    id:nanoid(),\n    currencyName: '',\n    nbrRate: \"\",\n    buyRate: \"\",\n    sellRate: \"\",\n  });\n\n  const navigate = useNavigate();\n  const param = useParams().name;\n\n  useEffect(() => {\n\n     const localStorageArr = JSON.parse(localStorage.getItem(\"moneyGuardCurrency\"));\n    if (param) {\n      const newCurrency = localStorageArr.find(c => c.currencyName === param);\n      if (newCurrency) setIsCurrency(newCurrency);\n    }\n  }, [param]);\n\n\n\n  const handleSubmit = e => {\n\n    e.preventDefault();\n\n    const localStorageArr = JSON.parse(localStorage.getItem(\"moneyGuardCurrency\"));\n\n    if (!param){const checkDuplicateCurrency = localStorageArr.find(c => c.currencyName === isCurrency.currencyName);\n    if (checkDuplicateCurrency) {\n      alert(\"This currency is already available. Enter other name or cancel request.\"); return\n    }}\n\n    const index = localStorageArr.findIndex(c => c.id === isCurrency.id);\n\n    if (index !== -1) {\n      localStorageArr[index] = isCurrency;\n    } else {\n      localStorageArr.push(isCurrency); \n    };\n\n    localStorage.setItem(\"moneyGuardCurrency\", JSON.stringify(localStorageArr))\n\n    setIsCurrency({\n      id:nanoid(),\n      currencyName: '',\n      nbrRate: '',\n      buyRate: '',\n      sellRate: '',\n    });\n\n    navigate(origin);\n  };\n\n  return (\n    <section className={style.newCoinWrapper}>\n      <div className={style.newCoinContainer}>\n        <form className={style.newCoinForm} onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"currencyName\"\n            pattern=\"^[A-Za-z]{3}$\"\n            title=\"Enter exactly 3 letters.Example: USD, RON, EUR\"\n            value={isCurrency.currencyName}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Currency name\"\n            onChange={e =>\n              setIsCurrency(prev => ({\n                ...prev,\n                currencyName: e.target.value.toUpperCase(),\n              }))\n            }\n          />\n          <input\n            type=\"text\"\n            name=\"nbrRate\"\n            pattern=\"^\\d+(\\.\\d{1,4})?$\"\n            title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n            value={isCurrency.nbrRate}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Central bank rate\"\n            onChange={e =>\n              setIsCurrency(prev => ({ ...prev, nbrRate: e.target.value }))\n            }\n          />\n          <input\n            type=\"text\"\n            name=\"buyRate\"\n            pattern=\"^\\d+(\\.\\d{1,4})?$\"\n            title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n            value={isCurrency.buyRate}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Buy rate\"\n            onChange={e =>\n              setIsCurrency(prev => ({ ...prev, buyRate: e.target.value }))\n            }\n          />\n          <input\n            type=\"text\"\n            name=\"sellRate\"\n            pattern=\"^\\d+(\\.\\d{1,4})?$\"\n            title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n            value={isCurrency.sellRate}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Sell rate\"\n            onChange={e =>\n              setIsCurrency(prev => ({ ...prev, sellRate: e.target.value }))\n            }\n          />\n          <div className={style.newCoinFormButtons}>\n            <BigButtonsContainer firstBtn={param? \"Update\" : \"Add\"} secondBtn=\"Close\" />\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default NewCoin;\n\n/*\n    const checkDuplicateCurrency = currency.find(currency => currency.currencyName === isCurrency.currencyName);\n    if (checkDuplicateCurrency) {\n      alert(\"This currency is already available. Enter other name or cancel request.\"); return\n    }\n*/\n"],"names":["nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","_ref","firstBtn","secondBtn","handleSubmit","_jsxs","_Fragment","children","_jsx","className","concat","style","bigButton","selectedBtn","Link","to","notSelectedBtn","origin","isCurrency","setIsCurrency","useState","currencyName","nbrRate","buyRate","sellRate","navigate","useNavigate","param","useParams","name","useEffect","localStorageArr","JSON","parse","localStorage","getItem","newCurrency","find","c","newCoinWrapper","newCoinContainer","newCoinForm","onSubmit","e","preventDefault","alert","index","findIndex","push","setItem","stringify","type","pattern","title","value","required","autoComplete","placeholder","onChange","prev","_objectSpread","target","toUpperCase","newCoinFormButtons","BigButtonsContainer"],"sourceRoot":""}