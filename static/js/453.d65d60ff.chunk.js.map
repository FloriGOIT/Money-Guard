{"version":3,"file":"static/js/453.d65d60ff.chunk.js","mappings":"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","sources":["helpers/categories.jsx","pages/NewCard.jsx","helpers/timeInfo.jsx"],"sourcesContent":["\n\nexport const mainExpenses = [{ type: \"Groceries\", color: \"#ADFF2F\" },{ type: \"House care\", color: \"yellow\" },{ type: \"Self care\", color: \"#F08080\" },{ type: \"Family Care\", color: \"#6495ED\" },{ type: \"Utilities\", color: \"#B8860B\" },{ type: \"Education\", color: \"#008B8B\" },{ type: \"Leisure\", color: \"#BDB76B\" },{ type: \"Other types\", color: \"#FF8C00\" }]\nexport const mainIncomes = [{ type: \"Salary\", color: \"#FF8C00\" }, { type: \"Project\", color: \"#FFF8DC\" }, { type: \"Gift\", color: \"#7FFF00\" }, { type: \"Donation\", color: \"#90EE90\" }, { type: \"Loan\", color: \"#FFB6C1\" }, { type: \"Other\", color: \"#ADD8E6\" }]\nexport const allCategories = mainExpenses.concat(mainIncomes)","import style from '../components/moneyGuard.module.scss';\nimport {useEffect, useState } from 'react';\nimport { mainIncomes, mainExpenses,allCategories } from '../helpers/categories';\nimport { FaAngleDown } from 'react-icons/fa6';\nimport { FaChevronUp } from 'react-icons/fa';\nimport { Link,useParams } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { today,months } from \"../helpers/timeInfo\";\n\n\nconst NewCard = ({ info }) => {\n\n  const [isExpense, setIsExpense] = useState(false);\n  const [isListCategoriesOn, setIsListCategoriesOn] = useState(false);\n  const [isOption, setIsOption] = useState('Select a category');\n  const [isDate, setIsDate] = useState(today);\n  const [isAmount, setIsAmount] = useState(\"\");\n  const [isDetails, setIsDetails] = useState(\"\");\n  const [isColor, setIsColor] = useState(\"\")\n  const navigate = useNavigate();\n\n  const monthPreLether = months.filter(month => month.number === isDate.split(\"-\")[1] );\n  const monthLether = monthPreLether[0].name;\n      const defaultCard = {\n      id: nanoid(),\n        date: isDate,\n        year: isDate.split(\"-\")[0],\n      month:monthLether,\n      expense: isExpense,\n      category: isOption,\n      details: isDetails,\n        amount: isAmount,\n      color:isColor\n      }\n\n  const { id } = useParams();\n  \n  const selectedCard = info.find(card => card.idFrontend === id);\n\n  useEffect(()=>{ if (selectedCard) {\n    \n    setIsExpense(selectedCard.expense); \n    setIsOption(selectedCard.category);\n    setIsDate(selectedCard.date);\n    setIsAmount(selectedCard.amount);\n    setIsDetails(selectedCard.details);\n    setIsColor(selectedCard.color)\n  }},[selectedCard])\n \n\n  let arrCategory = isExpense ? mainExpenses: mainIncomes ;\n  const buttonArrow = isListCategoriesOn ? <FaChevronUp /> : <FaAngleDown />;\n\n  const handleToggle = () => {\n    setIsExpense(prev => !prev);\n    setIsOption('Select a category');\n  };\n  const handleSelectedCategory = e => {\n    e.preventDefault();\n    setIsListCategoriesOn(prev => !prev);\n  };\n  const handleOption = input => {\n    setIsOption(input);\n    const identifyColor = allCategories.find(category => category.expense === input)\n    setIsColor(identifyColor.color)\n    setIsListCategoriesOn(prev => !prev);\n  };\n\n\n  \n  const submitNewCard = (e) => {\n    e.preventDefault();\n    const index = info.findIndex(card=>card.idFrontend===id)\n    if (id) { info.splice(index, 1); }\n\n\n    if (isOption === 'Select a category') {\n      alert(\"Please select a type of income or expense.\");\n      return;\n    }\n\n    if (isAmount === '') {\n      alert(\"Please add a value higher than 0.00\");\n      return;\n    }\n    if (Number(defaultCard.year) < 2020) { alert(\"Please enter a date that starts with year 2020\"); return }\n    if (index !== -1) { info[index] = defaultCard }\n    else{info.push(defaultCard);}\n    \n    localStorage.setItem(\"listCards\", JSON.stringify(info))\n    setIsExpense(false);\n    setIsListCategoriesOn(false);\n    setIsOption('Select a category');\n    setIsDate(today);\n    setIsAmount(\"\");\n    setIsDetails(\"\");\n    setIsColor(\"\")\n\n\n  navigate(\"/\")\n \n    \n  };\n\n  return (\n    <section className={style.newCardWrapper}>\n      <div className={style.newCardContainer}>\n        <h2>Add transaction</h2>\n        \n        <form className={style.newCardForm} onSubmit={submitNewCard}>\n          <div className={style.newCardToggle}>\n            <span style={{ color: isExpense ? 'white' : 'rgb(194, 240, 126)' }}>\n              Income\n            </span>\n            <label className={style.switch}>\n              <input\n                type=\"checkbox\"\n                name=\"toggleNewCard\"\n                checked={isExpense}\n                onChange={handleToggle}\n                autoComplete=\"off\"\n              />\n              <span className={`${style.slider} ${style.round}`}></span>\n            </label>\n            <span style={{ color: isExpense ? 'rgb(211, 76, 76)' : 'white' }}>\n              Expense\n            </span>\n          </div>\n\n          <div className={`${style.rowFormNewCard} ${style.categorySelection}`}>\n            <input\n              type=\"text\"\n              value={isOption}\n              readOnly\n              name=\"selectAcategory\"\n              style={{ color: isOption === 'Select a category' ? \"rgba(206, 204, 204, 0.664)\" : \"white\" }}\n              autoComplete=\"off\"\n            />\n            <button\n              onClick={handleSelectedCategory}\n              className={style.rowFormNewCardElem2}\n            >\n              {buttonArrow}\n            </button>\n          </div>\n\n          {isListCategoriesOn ? (\n            <ul className={style.newCardList}>\n              {arrCategory.map(category => (\n                <li\n                  key={category.expense}\n                  value={category.expense.toLowerCase()}\n                  className={style.newCardOption }\n                  onClick={() => handleOption(category.expense)}\n                >\n                  <input\n                    type=\"text\"\n                    name={category.expense}\n                    value={category.expense}\n                    readOnly\n                    autoComplete=\"off\"\n                    required\n                    className={!isExpense ? `${style.income}` : `${style.expense}`}\n                  />\n                </li>\n              ))}\n            </ul>\n          ) : null}\n\n          <div\n            className={`${style.rowFormNewCard} ${style.amountAndDateSelection}`}\n          >\n            <input\n              className={style.amount}\n              type=\"text\"\n              name=\"amount\"\n              pattern=\"^\\d+(\\.\\d{1,2})?$\"\n              value={isAmount}\n              title=\"Enter an amount highet than 0, that has the followig format 5, 5.5 or 5.00\"\n              placeholder=\"0.00\"\n              required\n              autoComplete=\"off\"\n              onChange={e=>setIsAmount(e.target.value)}\n            />\n            <input\n              type=\"date\"\n              name=\"dateNewCard\"\n              className={style.date}\n              onChange={e => setIsDate(e.target.value)}\n              value={isDate}\n              autoComplete=\"off\"\n            />\n          </div>\n\n          <div className={`${style.rowFormNewCard} ${style.commentSelection}`}>\n            <input\n              type=\"text\"\n              name=\"comment\"\n              className={style.comment}\n              value={isDetails}\n              placeholder=\"-\"\n              autoComplete=\"off\"\n               onChange={e=>setIsDetails(e.target.value)}\n            />\n          </div>\n\n          <div className={style.newCardButtons}>\n\n              <button\n                type=\"submit\"\n                className={`${style.bigButton} ${style.selectedBtn}`}\n              >Add\n              </button>\n\n\n            <Link\n              to=\"/\"\n              className={`${style.bigButton} ${style.notSelectedBtn}`}\n            >\n              Cancel\n            </Link>\n          </div>\n        </form>\n      \n      \n      </div>\n    </section>\n  );\n};\n\nexport default NewCard;\n\n/*\n\n\n*/\n","export const months = [\n  { number: '01', name: 'January' },\n  { number: '02', name: 'February' },\n  { number: '03', name: 'March' },\n  { number: '04', name: 'April' },\n  { number: '05', name: 'May' },\n  { number: '06', name: 'June' },\n  { number: '07', name: 'July' },\n  { number: '08', name: 'August' },\n  { number: '09', name: 'September' },\n  { number: '10', name: 'October' },\n  { number: '11', name: 'November' },\n  { number: '12', name: 'December' },\n];\nexport const years = [\n  { number: '2025', name: '2025' },\n  { number: '2026', name: '2026' },\n  { number: '2027', name: '2027' },\n  { number: '2028', name: '2028' },\n  { number: '2029', name: '2029' },\n  { number: '2030', name: '2030' },\n];\n\nexport const todayNewDate = new Date();\nexport const currentYear = todayNewDate.getFullYear();\nexport const currentMonth = (todayNewDate.getMonth() + 1).toString().padStart(2, '0');\nconst currentMonthFilter = months.filter(el => Number(el.number) === Number(currentMonth));\nexport const currentMonthLetter = currentMonthFilter[0].name;\nexport const currentDay = todayNewDate.getDate().toString().padStart(2, '0');\nexport const today = `${currentYear}-${currentMonth}-${currentDay}`;\n\n"],"names":["mainExpenses","type","color","mainIncomes","allCategories","concat","_ref","info","isExpense","setIsExpense","useState","isListCategoriesOn","setIsListCategoriesOn","isOption","setIsOption","isDate","setIsDate","today","isAmount","setIsAmount","isDetails","setIsDetails","isColor","setIsColor","navigate","useNavigate","monthLether","months","filter","month","number","split","name","defaultCard","id","nanoid","date","year","expense","category","details","amount","useParams","selectedCard","find","card","idFrontend","useEffect","arrCategory","buttonArrow","_jsx","FaChevronUp","FaAngleDown","className","style","newCardWrapper","children","_jsxs","newCardContainer","newCardForm","onSubmit","e","preventDefault","index","findIndex","splice","Number","alert","push","localStorage","setItem","JSON","stringify","newCardToggle","switch","checked","onChange","handleToggle","prev","autoComplete","slider","round","rowFormNewCard","categorySelection","value","readOnly","onClick","rowFormNewCardElem2","newCardList","map","toLowerCase","newCardOption","input","identifyColor","handleOption","required","income","amountAndDateSelection","pattern","title","placeholder","target","commentSelection","comment","newCardButtons","bigButton","selectedBtn","Link","to","notSelectedBtn","todayNewDate","Date","currentYear","getFullYear","currentMonth","getMonth","toString","padStart","currentMonthLetter","el","currentDay","getDate"],"sourceRoot":""}