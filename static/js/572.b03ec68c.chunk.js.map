{"version":3,"file":"static/js/572.b03ec68c.chunk.js","mappings":"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","sources":["components/Nav.jsx","pages/ExpensesStatistics.jsx"],"sourcesContent":["import style from './moneyGuard.module.scss';\nimport { IoHomeSharp } from 'react-icons/io5';\nimport { ImStatsDots } from \"react-icons/im\";\nimport { BsCurrencyExchange } from 'react-icons/bs';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst Nav = () => {\n  const location = useLocation();\n  const pathName = location.pathname.split(\"/\")\n  const navLocation = pathName[1];\n  const linkNavLocation = `/${navLocation}`\n\n  return (\n    <nav className={style.navLinks}>\n      \n      <Link to=\"/\" className={linkNavLocation === \"/\"? `${style.selectedNav}`:null}>\n        <IoHomeSharp />\n      </Link>\n      <Link to=\"/statistics\" className={linkNavLocation === \"/statistics\"? `${style.selectedNav}`:null}>\n        <ImStatsDots />\n      </Link>\n      <Link to=\"/currency\" className={linkNavLocation === \"/currency\"? `${style.selectedNav}`:null}>\n        <BsCurrencyExchange />\n      </Link>\n    </nav>\n  );\n};\nexport default Nav\n","import Nav from 'components/Nav';\nimport style from '../components/moneyGuard.module.scss';\nimport { months } from '../helpers/timeInfo';\nimport { currentYear } from '../helpers/timeInfo';\nimport ModalTime from '../components/ModalTime';\nimport { useEffect, useState } from 'react';\nimport DonutChart from 'components/DonutChart';\n\nconst ExpensesStatistics = ({ info }) => {\n  const [isSelectedMonth, setIsSelectedMonth] = useState('-');\n  const [isSelectedYear, setIsSelectedYear] = useState(currentYear);\n  const [arrayMonthInSelectedYear, setArrayMonthInSelectedYear] = useState([]);\n  const [selectedMonthAndYear, setSelectedMonthAndYear] = useState([]);\n\n  const handleMonth = value => setIsSelectedMonth(value);\n  const handleYear = value => setIsSelectedYear(value);\n\n  useEffect(() => {\n    const selectedYear = info.filter(\n      info => Number(info.year) === Number(isSelectedYear)\n    );\n    const availableMonths = selectedYear.map(info => info.month);\n    const uniqueMonths = [...new Set(availableMonths)];\n    const filteredMonths = months.filter(month =>\n      uniqueMonths.includes(month.name)\n    );\n    filteredMonths.push({ number: '-', name: '-' });\n\n    setArrayMonthInSelectedYear(filteredMonths);\n  }, [isSelectedYear, info]);\n\n  useEffect(() => {\n    const arr = info.filter(\n      info => Number(info.year) === Number(isSelectedYear)\n    );\n    const filteredArr =\n      isSelectedMonth !== '-'\n        ? arr.filter(info => info.month === isSelectedMonth)\n        : arr;\n\n    setSelectedMonthAndYear(filteredArr);\n  }, [info, isSelectedMonth, isSelectedYear]);\n\n  const expensesArr =\n    selectedMonthAndYear.filter(transaction => transaction.type) || [];\n  const expensesArrReducer = expensesArr.reduce((acc, item) => {\n    const { category, amount, color } = item;\n    const numericAmount = parseFloat(amount);\n    if (!acc[category]) {\n      acc[category] = {\n        total: 0,\n        color: color,\n      };\n    }\n    acc[category].total += numericAmount;\n    return acc;\n  }, {});\n\n  const cumulatedExpenes = Object.entries(expensesArrReducer)\n    .map(([category, data]) => ({\n      category,\n      total: data.total,\n      color: data.color,\n    }))\n    .sort((a, b) => b.total - a.total);\n\n  const infoReducer = selectedMonthAndYear.reduce(\n    (acc, item) => {\n      const category =\n        item.type === true\n          ? 'expenses'\n          : item.type === false\n          ? 'incomes'\n          : null;\n      if (!category) return acc;\n\n      const amount = parseFloat(item.amount);\n      acc[category] += amount;\n\n      return acc;\n    },\n    {\n      incomes: 0,\n      expenses: 0,\n    }\n  );\n\n  const filterYearsForSelection = info\n    .map(info => info.date.split('-')[0])\n    .filter((year, index, array) => array.indexOf(year) === index)\n    .sort((a, b) => a.localeCompare(b))\n    .map(year => {\n      return { number: year, name: year };\n    });\n\n\n  return (\n    <section className={style.statisticsWrapper}>\n      <Nav />\n      \n      <div className={style.statistics}>\n        <h2>Statistics</h2>\n        <ModalTime\n          initialValue={isSelectedYear}\n          infoPeriod={filterYearsForSelection}\n          handleYear={handleYear}\n          handleMonth={handleMonth}\n          name=\"years\"\n        />\n\n        <ModalTime\n          initialValue={isSelectedMonth}\n          infoPeriod={arrayMonthInSelectedYear}\n          handleMonth={handleMonth}\n          name=\"months\"\n        />\n\n        {infoReducer.expenses > 0 ? <div className={style.chartWrapper}>\n          <DonutChart info={cumulatedExpenes} />\n        </div> : null}\n\n        <div className={style.tableHeaderCategories}>\n          <span>Category</span>\n          <span>Sum</span>\n        </div>\n        {cumulatedExpenes.map(expense => {\n          return (\n            <div key={expense.category} className={style.tableRowsCategories}>\n              <div className={style.categoryWithColor}>\n                <span style={{ backgroundColor: `${expense.color}` }}></span>\n                <span>{expense.category}</span>\n              </div>\n              <span className={style.categoryAmount}>\n                {Number(expense.total).toFixed(2)}\n              </span>\n            </div>\n          );\n        })}\n\n        <div className={style.totalCategories}>\n          <div className={style.totalIncomes}>\n            <span>Incomes:</span>\n            <span>{Number(infoReducer.incomes).toFixed(2)}</span>\n          </div>\n\n          <div className={style.totalExpenses}>\n            <span>Expenses:</span>\n            <span>{Number(infoReducer.expenses).toFixed(2)}</span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ExpensesStatistics;\n\n/*\n\n\n\n        */\n"],"names":["navLocation","useLocation","pathname","split","linkNavLocation","concat","_jsxs","className","style","children","_jsx","Link","to","IoHomeSharp","ImStatsDots","BsCurrencyExchange","_ref","info","_useState","useState","_useState2","_slicedToArray","isSelectedMonth","setIsSelectedMonth","_useState3","currentYear","_useState4","isSelectedYear","setIsSelectedYear","_useState5","_useState6","arrayMonthInSelectedYear","setArrayMonthInSelectedYear","_useState7","_useState8","selectedMonthAndYear","setSelectedMonthAndYear","handleMonth","value","useEffect","availableMonths","filter","Number","year","map","month","uniqueMonths","_toConsumableArray","Set","filteredMonths","months","includes","name","push","number","arr","filteredArr","expensesArrReducer","transaction","type","reduce","acc","item","category","amount","color","numericAmount","parseFloat","total","cumulatedExpenes","Object","entries","_ref2","_ref3","data","sort","a","b","infoReducer","incomes","expenses","filterYearsForSelection","date","index","array","indexOf","localeCompare","Nav","ModalTime","initialValue","infoPeriod","handleYear","DonutChart","expense","backgroundColor","toFixed"],"sourceRoot":""}