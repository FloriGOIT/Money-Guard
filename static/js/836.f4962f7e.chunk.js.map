{"version":3,"file":"static/js/836.f4962f7e.chunk.js","mappings":"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","sources":["components/ModalTime.jsx","helpers/categories.jsx","helpers/currencyBNR.jsx","components/Logo.jsx","components/Header.jsx","components/TabletMobileDesign/AddButton.jsx","components/TabletMobileDesign/CurrencyAll.jsx","components/TabletMobileDesign/ListCardsAll.jsx","components/TabletMobileDesign/ModalTimeAll.jsx","components/TabletMobileDesign/NavAll.jsx","components/TabletMobileDesign/BigBtnWithColorAll.jsx","components/TabletMobileDesign/BigBtnNoColorAll.jsx","components/TabletMobileDesign/NewCoinFormAll.jsx","components/TabletMobileDesign/NewCardFormAll.jsx","components/TabletMobileDesign/StatisticsAll.jsx","components/TabletMobileDesign/AllinOne.jsx","helpers/timeInfo.jsx","components/Balance.jsx","components/DonutChart.jsx"],"sourcesContent":["import style from '../components/moneyGuard.module.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport { FaAngleDown } from 'react-icons/fa6';\nimport { FaChevronUp } from 'react-icons/fa';\nimport { nanoid } from 'nanoid';\n\nconst ModalTime = ({ infoPeriod, initialValue, name, handleMonth, handleYear }) => {\n  const [isModalOn, setisModalOn] = useState(false);\n  const modalRef = useRef(null); // Step 1: Create a ref\n  // Step 2: Click outside logic\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (modalRef.current && !modalRef.current.contains(event.target)) {\n        setisModalOn(false);\n      }\n    };\n\n    if (isModalOn) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isModalOn]);\n\n  const handleOptionSelect = (value) => {\n    setisModalOn(false);\n    if (name === \"months\") handleMonth(value);\n    if (name === \"years\") {\n      handleMonth(\"-\");\n      handleYear(value);\n    }\n  };\n\n  return (\n    <div className={style.statisticsPeriod} ref={modalRef}>\n      <div className={isModalOn ? `${style.headerPeriodOff} ${style.headerPeriodOn}`: `${style.headerPeriodOff}`}>\n        <span>{initialValue}</span>\n        <button\n          type=\"button\"\n          onClick={(e) => {\n            e.preventDefault();\n            setisModalOn((prev) => !prev);\n          }}\n        >\n          {isModalOn ? <FaChevronUp /> : <FaAngleDown />}\n        </button>\n      </div>\n      {isModalOn && (\n        <ul className={`${style.listPeriod} ${style[name]}`}>\n          {infoPeriod.map((item) => (\n            <li key={nanoid()}>\n              <button type=\"button\" onClick={() => handleOptionSelect(item.name)}>\n                {item.name}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default ModalTime;\n\n","\n\nexport const mainExpenses = [{ type: \"Groceries\", color: \"#ADFF2F\" },{ type: \"House care\", color: \"yellow\" },{ type: \"Self care\", color: \"#F08080\" },{ type: \"Family Care\", color: \"#6495ED\" },{ type: \"Utilities\", color: \"#B8860B\" },{ type: \"Education\", color: \"#008B8B\" },{ type: \"Leisure\", color: \"#BDB76B\" },{ type: \"Other types\", color: \"#FF8C00\" }]\nexport const mainIncomes = [{ type: \"Salary\", color: \"#FF8C00\" }, { type: \"Project\", color: \"#FFF8DC\" }, { type: \"Gift\", color: \"#7FFF00\" }, { type: \"Donation\", color: \"#90EE90\" }, { type: \"Loan\", color: \"#FFB6C1\" }, { type: \"Other\", color: \"#ADD8E6\" }]\nexport const allCategories = mainExpenses.concat(mainIncomes)","const currency = [\n  { id:'111',\n    currencyName: 'EUR',\n    nbrRate: '5.0751',\n    buyRate: '4.9990',\n    sellRate: '5.1470',\n  },\n  { id:'222',\n    currencyName: 'USD',\n    nbrRate: '4.3838',\n    buyRate: '4.3020',\n    sellRate: '4.4600',\n  },\n  { id:'333',\n    currencyName: 'GBP',\n    nbrRate: '5.8533',\n    buyRate: '5.7680',\n    sellRate: '5.9580',\n  },\n];\n\nexport default currency;\n//new Intl.NumberFormat('fr-FR').format(Number(amount).toFixed(2))","import logo from '../helpers/images/logo.png';\nimport style from './moneyGuard.module.scss';\n\nconst Logo = () => {\n  return (\n    <div className={style.logoWrapper}>\n      <img src={logo} alt=\"money-guard-logo\" />\n      <span>Money Guard</span>\n    </div>\n  );\n};\nexport default Logo;\n","\nimport Logo from './Logo';\nimport style from './moneyGuard.module.scss';\n\n\nconst Header = ({handleLogOutModal}) => {\n  return (\n      <header className={style.sharedLayoutHeader}>\n        <Logo />\n      </header>\n  );\n};\nexport default Header;\n\n/*\n//import { RiLogoutCircleRLine } from 'react-icons/ri';\n//import { Link } from 'react-router-dom';\nconst Header = ({handleLogOutModal}) => {\n  return (\n      <header className={style.sharedLayoutHeader}>\n        <Logo />\n        <div className={style.sharedLayoutUser}>\n          <p>Florentina</p>\n          <Link to=\"/logout\" title=\"Log Out\">\n            <RiLogoutCircleRLine />\n          </Link>\n        </div>\n      </header>\n\n  );\n};\nexport default Header;\n*/","import style from \"../moneyGuard.module.scss\"\nimport { IoAddSharp } from 'react-icons/io5';\n\n\nconst AddButton = () => {\n        return (<button type=\"button\" className={style.addButtonAll} >\n                <IoAddSharp className={style.addButtonSVG}/>\n        </button>)\n}\n\nexport default AddButton\n","import style from '../moneyGuard.module.scss';\nimport { MdOutlineModeEdit } from 'react-icons/md';\nimport { MdDeleteOutline } from 'react-icons/md';\nimport AddButton from './AddButton';\n\nconst CurrencyAll = ({\n  listCurrencies,\n  handleAddCoinModal,\n  handleIdForCoinUpdate,\n  handleIdForCoinDel,\n}) => {\n const fourDecimalsNumber = value =>{ return new Intl.NumberFormat('fr-FR', { \n  minimumFractionDigits: 4, \n  maximumFractionDigits: 4 \n }).format(Number(value));\n  } \n  \n  return (\n    <div className={style.preCurrencyTableAll}>\n      <table className={style.currencyTableAll}>\n        <thead>\n          <tr>\n            <th className={style.nonRate}></th>\n            <th className={style.withRate}>NBR</th>\n            <th className={style.withRate}>Buy</th>\n            <th className={style.withRate}>Sell</th>\n            <th onClick={handleAddCoinModal}>\n              <AddButton />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {listCurrencies.map(el => (\n            <tr key={el.id}>\n              <td className={style.nonRate}>{el.currencyName}</td>\n              <td className={style.withRate}>\n                {fourDecimalsNumber(el.nbrRate)}\n              </td>\n              <td className={style.withRate}>\n                {fourDecimalsNumber(el.buyRate)}\n              </td>\n              <td className={style.withRate}>\n                {fourDecimalsNumber(el.sellRate)}\n              </td>\n              <td\n                className={style.smallBtn}\n                style={{ paddingLeft: '5px' }}\n                onClick={() => handleIdForCoinDel(el.id)}\n              >\n                <div className={style.deletCurrency}>\n                  <MdDeleteOutline />\n                </div>\n              </td>\n              <td\n                className={style.smallBtn}\n                style={{ paddingLeft: '10px' }}\n                onClick={() => handleIdForCoinUpdate(el.id)}\n              >\n                <div className={style.editCurrency}>\n                  <MdOutlineModeEdit />\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default CurrencyAll;\n","import style from '../../components/moneyGuard.module.scss';\nimport { MdOutlineModeEdit } from 'react-icons/md';\nimport { MdDeleteOutline } from 'react-icons/md';\nimport { ImMinus } from 'react-icons/im';\nimport { PiPlusMinusBold } from 'react-icons/pi';\nimport { ImPlus } from 'react-icons/im';\nimport AddButton from './AddButton';\n\n\nconst ListCardsAll = ({ info, isYearMonthForFilter,handleAddCardModal,handleDeleteCard,handleIdForCardUpdate }) => {\n\n  const filteredInfoOnPeriod = info.filter(el => Number(el.year) === Number(isYearMonthForFilter.year))\n                                   .filter(el => {if(isYearMonthForFilter.month === \"-\"){ return el }\n                                   else { return el.month === isYearMonthForFilter.month }\n                                   })\n  const handleAddNewCard = () => { handleAddCardModal(); handleIdForCardUpdate(\"\") }\n  \n  return (\n    <div className={style.listCardsTabletContainer}>\n      <table>\n        <thead>\n          <tr>\n            <th  style={{width: \"100px\"}}>Date</th>\n            <th className={style.piPlusMinusBold}>\n              <PiPlusMinusBold className={style.plusMinus} />\n            </th>\n            <th style={{width: \"100px\"}}>Category</th>\n            <th >Comment</th>\n            <th style={{width: \"80px\"}}>Sum</th>\n            <th onClick={handleAddNewCard}><AddButton /></th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredInfoOnPeriod.map(card => (\n            <tr key={card.idFrontend} >\n              <td className={style.cardDate} style={{width: \"100px\"}}>{card.date}</td>\n              <td className={style.cardType}>\n                {card.espense ? <ImPlus className={style.imPlus}/> : <ImMinus className={style.imMinus}/>}\n              </td>\n              <td className={style.cardCategory} style={{width: \"100px\"}}>{card.category}</td>\n              <td className={style.cardDetails} >{card.details}</td>\n              <td className={style.cardAmount} style={{width: \"80px\"}}>{new Intl.NumberFormat('fr-FR').format(Number(card.amount).toFixed(2))}</td>\n              <td className={style.cardButton} style={{ padding: \"0px 5px 5px 5px\" }} onClick={() =>handleDeleteCard(card.idFrontend)}>\n                <div className={style.deletCurrency} >\n                  <MdDeleteOutline />\n                </div>\n              </td>\n              <td className={style.cardButton} style={{ padding: \"0px 5px 5px 5px\" }} onClick={() => { handleIdForCardUpdate(card.idFrontend);; handleAddCardModal()}}>\n                <div className={style.editCurrency} >\n                  <MdOutlineModeEdit/>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ListCardsAll;\n\n\n","import style from '../../components/moneyGuard.module.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport { FaAngleDown } from 'react-icons/fa6';\nimport { FaChevronUp } from 'react-icons/fa';\nimport { nanoid } from 'nanoid';\nimport { currentYear, currentMonthLetter } from '../../helpers/timeInfo';\n\nconst ModalTimeAll = ({ info, handleYearMonth }) => {\n  const [isSelectedYear, setIsSelectedYear] = useState(currentYear);\n  const [isSelectedMonth, setIsSelectedMonth] = useState(currentMonthLetter);\n  const [isModalYearOn, setisModalYearOn] = useState(false);\n  const [isModalMonthOn, setisModalMonthOn] = useState(false);\n\n  const modalRefYear = useRef(null);\n  const modalRefMonth = useRef(null);\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (\n        modalRefYear.current &&\n        !modalRefYear.current.contains(event.target)\n      ) {\n        setisModalYearOn(false);\n      }\n\n      if (\n        modalRefMonth.current &&\n        !modalRefMonth.current.contains(event.target)\n      ) {\n        setisModalMonthOn(false);\n      }\n    };\n\n    if (isModalYearOn || isModalMonthOn) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isModalYearOn, isModalMonthOn]);\n\n  const optionsYears = info\n    .map(el => el.year)\n    .filter((el, idx, arr) => arr.indexOf(el) === idx);\n\n  const optionsMonths = info\n    .filter(el => Number(el.year) === Number(isSelectedYear))\n    .map(el => el.month)\n    .filter((el, idx, arr) => arr.indexOf(el) === idx);\n  optionsMonths.push(\"-\");\n  const handleOptionYear = value => {\n    setisModalYearOn(false);\n    setIsSelectedMonth(\"-\");\n    handleYearMonth(prev => ({ ...prev, year: value, month:\"-\" }));\n    setIsSelectedYear(value);\n  };\n\n  const handleOptionMonth = value => {\n    setisModalMonthOn(false);\n    setIsSelectedMonth(value);\n    handleYearMonth(prev => ({ ...prev, month: value }));\n  };\n\n  return (\n    <div className={style.modalTimeSelect} ref={modalRefYear}>\n      <div className={style.years}>\n        <div\n          className={\n            isModalYearOn\n              ? `${style.headerPeriodOff} ${style.headerPeriodOn}`\n              : `${style.headerPeriodOff}`\n          }\n        >\n          <span>{isSelectedYear}</span>\n          <button\n            type=\"button\"\n            onClick={e => {\n              e.preventDefault();\n              setisModalYearOn(prev => !prev);\n            }}\n          >\n            {isModalYearOn ? <FaChevronUp /> : <FaAngleDown />}\n          </button>\n        </div>\n        {isModalYearOn && (\n          <ul className={`${style.listPeriod}`}>\n            {optionsYears.map(item => (\n              <li key={nanoid()}>\n                <button type=\"button\" onClick={() => handleOptionYear(item)}>\n                  {item}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      <div className={style.months} ref={modalRefMonth}>\n        <div\n          className={\n            isModalMonthOn\n              ? `${style.headerPeriodOff} ${style.headerPeriodOn}`\n              : `${style.headerPeriodOff}`\n          }\n        >\n          <span>{isSelectedMonth}</span>\n          <button\n            type=\"button\"\n            onClick={e => {\n              e.preventDefault();\n              setisModalMonthOn(prev => !prev);\n            }}\n          >\n            {isModalMonthOn ? <FaChevronUp /> : <FaAngleDown />}\n          </button>\n        </div>\n        {isModalMonthOn && (\n          <ul className={`${style.listPeriod}`}>\n            {optionsMonths.map(item => (\n              <li key={nanoid()}>\n                <button type=\"button\" onClick={() => handleOptionMonth(item)}>\n                  {item}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ModalTimeAll;\n","import { IoHomeSharp } from 'react-icons/io5';\nimport { ImStatsDots } from 'react-icons/im';\nimport style from \"../../components/moneyGuard.module.scss\"\n\nconst NavAll = ({ isHomeSelected, handleNav }) => {\n  return (\n    <nav>\n      <div\n        onClick={isHomeSelected ? null : handleNav}\n        className={\n          isHomeSelected\n            ? `${style.selectedNavAll}`\n            : `${style.notSelectedNavAll}`\n        }\n      >\n        <IoHomeSharp />\n        <span>Home</span>\n      </div>\n\n      <div\n        onClick={isHomeSelected ? handleNav : null}\n        className={\n          isHomeSelected\n            ? `${style.notSelectedNavAll}`\n            : `${style.selectedNavAll}`\n        }\n      >\n        <ImStatsDots />\n        <span>Statistics</span>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavAll\n","import style from \"../moneyGuard.module.scss\"\n\nconst BigBtnWithColorAll = ({valueBtn,type}) => {\n        return <button type={type} className={style.bigBtnWithColor} >{valueBtn}</button>\n}\n\nexport default BigBtnWithColorAll","import style from \"../moneyGuard.module.scss\"\n\n\nconst BigBtnNoColorAll = ({valueBtn, handleModal}) => {\n        return <button className={style.bigBtnNoColor} onClick={handleModal}>{valueBtn}</button>\n}\n\nexport default BigBtnNoColorAll","import style from '../moneyGuard.module.scss';\nimport { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport BigBtnWithColorAll from './BigBtnWithColorAll';\nimport BigBtnNoColorAll from './BigBtnNoColorAll';\n\nconst NewCoinFormAll = ({\n  handleAddNewCoin,\n  handleAddCoinModal,\n  isIdForCoinUpdate,\n  isListCurrencies,\n}) => {\n  const [isCoin, setIsCoin] = useState({\n    id: nanoid(),\n    currencyName: '',\n    nbrRate: '',\n    buyRate: '',\n    sellRate: '',\n  });\n\n  useEffect(() => {\n    const coinToBeUpdated = isListCurrencies.find(\n      el => el.id === isIdForCoinUpdate\n    );\n\n    if (isIdForCoinUpdate) {\n      setIsCoin(coinToBeUpdated);\n    }\n  }, [isIdForCoinUpdate, isListCurrencies]);\n    \n  const handleSubmit = e => {\n    e.preventDefault();\n if(!isIdForCoinUpdate){      const checkDuplicate = isListCurrencies.find(\n        el => el.currencyName === isCoin.currencyName\n      );\n      if (checkDuplicate) {\n        alert(\n          'This currency is already available. Enter other name or cancel request.'\n        );\n      } else {\n        handleAddNewCoin(isCoin);\n      }\n}\n else { handleAddNewCoin(isCoin); setIsCoin({\n    id: nanoid(),\n    currencyName: '',\n    nbrRate: '',\n    buyRate: '',\n    sellRate: '',\n  }) }\n  };\n  const handleCancel = e => {\n    e.preventDefault();\n    setIsCoin({\n      id: nanoid(),\n      currencyName: '',\n      nbrRate: '',\n      buyRate: '',\n      sellRate: '',\n    });\n    handleAddCoinModal();\n  };\n \n  return (\n    <form className={style.newCoinFormAll} onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"currencyName\"\n        pattern=\"^[A-Za-z]{3}$\"\n        title=\"Enter exactly 3 letters.Example: USD, RON, EUR\"\n        value={isCoin.currencyName}\n        required\n        autoComplete=\"off\"\n        placeholder=\"Currency name\"\n        onChange={e =>\n          setIsCoin(prev => ({\n            ...prev,\n            currencyName: e.target.value.toUpperCase(),\n          }))\n        }\n      />\n      <input\n        type=\"text\"\n        name=\"nbrRate\"\n        pattern=\"^\\d{1,3}(\\.\\d{1,4})?$\"\n        title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n        value={isCoin.nbrRate}\n        required\n        autoComplete=\"off\"\n        placeholder=\"Central bank rate\"\n        onChange={e =>\n          setIsCoin(prev => ({ ...prev, nbrRate: e.target.value }))\n        }\n      />\n      <input\n        type=\"text\"\n        name=\"buyRate\"\n        pattern=\"^\\d{1,3}(\\.\\d{1,4})?$\"\n        title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n        value={isCoin.buyRate}\n        required\n        autoComplete=\"off\"\n        placeholder=\"Buy rate\"\n        onChange={e =>\n          setIsCoin(prev => ({ ...prev, buyRate: e.target.value }))\n        }\n      />\n      <input\n        type=\"text\"\n        name=\"sellRate\"\n        pattern=\"^\\d{1,3}(\\.\\d{1,4})?$\"\n        title=\"Number with up to 4 decimal places. Use dot as separator. Example: 5.00\"\n        value={isCoin.sellRate}\n        required\n        autoComplete=\"off\"\n        placeholder=\"Sell rate\"\n        onChange={e =>\n          setIsCoin(prev => ({ ...prev, sellRate: e.target.value }))\n        }\n      />\n      <div className={style.bigButtons}>\n        <BigBtnWithColorAll valueBtn=\"Save\" type=\"submit\" />\n        <BigBtnNoColorAll valueBtn=\"Close\" handleModal={handleCancel} />\n      </div>\n    </form>\n  );\n};\n\nexport default NewCoinFormAll;\n","import style from '../moneyGuard.module.scss';\nimport { useEffect, useState } from 'react';\nimport {\n  mainIncomes,\n  mainExpenses,\n  allCategories,\n} from '../../helpers/categories';\nimport { FaAngleDown } from 'react-icons/fa6';\nimport { FaChevronUp } from 'react-icons/fa';\nimport { nanoid } from 'nanoid';\nimport { today, months } from '../../helpers/timeInfo';\nimport BigBtnWithColorAll from './BigBtnWithColorAll';\nimport BigBtnNoColorAll from './BigBtnNoColorAll';\n\nconst NewCardFormAll = ({\n  info,\n  setIsArr,\n  handleAddCardModal,\n  isIdForCardUpdate,\n  handleIdForCardUpdate,\n}) => {\n  const [isExpense, setIsExpense] = useState(false);\n  const [isListCategoriesOn, setIsListCategoriesOn] = useState(false);\n  const [isOption, setIsOption] = useState('Select a category');\n  const [isDate, setIsDate] = useState(today);\n  const [isAmount, setIsAmount] = useState('');\n  const [isDetails, setIsDetails] = useState('');\n  const [isColor, setIsColor] = useState('');\n\n  const monthPreLether = months.filter(\n    month => month.number === isDate.split('-')[1]\n  );\n  const monthLether = monthPreLether[0].name;\n  const defaultCard = {\n    idFrontend: nanoid(),\n    date: isDate,\n    year: isDate.split('-')[0],\n    month: monthLether,\n    expense: isExpense,\n    category: isOption,\n    details: isDetails,\n    amount: isAmount,\n    color: isColor,\n  };\n\n  const selectedCard = info.find(card => card.idFrontend === isIdForCardUpdate);\n\n  useEffect(() => {\n    if (selectedCard) {\n      setIsExpense(selectedCard.expense);\n      setIsOption(selectedCard.category);\n      setIsDate(selectedCard.date);\n      setIsAmount(selectedCard.amount);\n      setIsDetails(selectedCard.details);\n      setIsColor(selectedCard.color);\n    }\n  }, [selectedCard]);\n\n  let arrCategory = isExpense ? mainExpenses : mainIncomes;\n  const buttonArrow = isListCategoriesOn ? <FaChevronUp /> : <FaAngleDown />;\n\n  const handleToggle = () => {\n    setIsExpense(prev => !prev);\n    setIsOption('Select a category');\n  };\n  const handleSelectedCategory = e => {\n    e.preventDefault();\n    setIsListCategoriesOn(prev => !prev);\n  };\n  const handleOption = input => {\n    setIsOption(input);\n    const identifyColor = allCategories.find(\n      category => category.type === input\n    );\n    setIsColor(identifyColor.color);\n    setIsListCategoriesOn(prev => !prev);\n  };\n\n  const submitNewCard = async e => {\n    e.preventDefault();\n\n    if (isOption === 'Select a category') {\n      alert('Please select a type of income or expense.');\n      return;\n    }\n\n    if (isAmount === '') {\n      alert('Please add a value higher than 0.00');\n      return;\n    }\n    if (Number(defaultCard.year) < 2020) {\n      alert('Please enter a date that starts with year 2020');\n      return;\n    }\n\n    try {\n      const responseFetch = await fetch('http://localhost:5000/', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(defaultCard),\n      });\n\n      if (!responseFetch.ok) {\n        throw new Error('Failed to save the card');\n      }\n      await responseFetch.json();\n\n      let updatedInfo = [...info];\n      if (isIdForCardUpdate) {\n        const filterCardBasedOnID = info.filter(\n          card => card.idFrontend === isIdForCardUpdate\n        );\n        updatedInfo = [...updatedInfo, ...filterCardBasedOnID];\n        setIsArr(updatedInfo)\n      } else {\n        updatedInfo = [...info, defaultCard];\n        setIsArr(updatedInfo)\n      }\n\n      localStorage.setItem('listCards', JSON.stringify(updatedInfo));\n    } catch (error) {\n      console.error('Error saving card:', error.message);\n    }\n\n    setIsExpense(false);\n    setIsListCategoriesOn(false);\n    setIsOption('Select a category');\n    setIsDate(today);\n    setIsAmount('');\n    setIsDetails('');\n    setIsColor('');\n    handleIdForCardUpdate('');\n    handleAddCardModal();\n  };\n\n  return (\n    <section className={style.newCardContainer}>\n      <h2>Add transaction</h2>\n\n      <form className={style.newCardForm} onSubmit={submitNewCard}>\n        <div className={style.newCardToggle}>\n          <span style={{ color: isExpense ? 'white' : 'rgb(194, 240, 126)' }}>\n            Income\n          </span>\n          <label className={style.switch}>\n            <input\n              type=\"checkbox\"\n              name=\"toggleNewCard\"\n              checked={isExpense}\n              onChange={handleToggle}\n              autoComplete=\"off\"\n            />\n            <span className={`${style.slider} ${style.round}`}></span>\n          </label>\n          <span style={{ color: isExpense ? 'rgb(211, 76, 76)' : 'white' }}>\n            Expense\n          </span>\n        </div>\n\n        <div className={`${style.rowFormNewCard} ${style.categorySelection}`}>\n          <input\n            type=\"text\"\n            value={isOption}\n            readOnly\n            name=\"selectAcategory\"\n            style={{\n              color:\n                isOption === 'Select a category'\n                  ? 'rgba(206, 204, 204, 0.664)'\n                  : 'white',\n            }}\n            autoComplete=\"off\"\n          />\n          <button\n            onClick={handleSelectedCategory}\n            className={style.rowFormNewCardElem2}\n          >\n            {buttonArrow}\n          </button>\n        </div>\n\n        {isListCategoriesOn ? (\n          <ul className={style.newCardList}>\n            {arrCategory.map(category => (\n              <li\n                key={category.type}\n                value={category.type.toLowerCase()}\n                className={style.newCardOption}\n                onClick={() => handleOption(category.type)}\n              >\n                <input\n                  type=\"text\"\n                  name={category.type}\n                  value={category.type}\n                  readOnly\n                  autoComplete=\"off\"\n                  required\n                  className={\n                    !isExpense ? `${style.income}` : `${style.expense}`\n                  }\n                />\n              </li>\n            ))}\n          </ul>\n        ) : null}\n\n        <div\n          className={`${style.rowFormNewCard} ${style.amountAndDateSelection}`}\n        >\n          <input\n            className={style.amount}\n            type=\"text\"\n            name=\"amount\"\n            pattern=\"^\\d+(\\.\\d{1,2})?$\"\n            value={isAmount}\n            title=\"Enter an amount highet than 0, that has the followig format 5, 5.5 or 5.00\"\n            placeholder=\"0.00\"\n            required\n            autoComplete=\"off\"\n            onChange={e => setIsAmount(e.target.value)}\n          />\n          <input\n            type=\"date\"\n            name=\"dateNewCard\"\n            className={style.date}\n            onChange={e => setIsDate(e.target.value)}\n            autoComplete=\"off\"\n            value={isDate}\n          />\n        </div>\n\n        <div className={`${style.rowFormNewCard} ${style.commentSelection}`}>\n          <input\n            type=\"text\"\n            name=\"comment\"\n            className={style.comment}\n            value={isDetails}\n            placeholder=\"-\"\n            autoComplete=\"off\"\n            maxLength=\"48\"\n            onChange={e => setIsDetails(e.target.value)}\n          />\n        </div>\n\n        <div className={style.bigButtons}>\n          <BigBtnWithColorAll type=\"submit\" valueBtn=\"Add\" />\n\n          <BigBtnNoColorAll\n            valueBtn=\"Cancel\"\n            handleModal={handleAddCardModal}\n          />\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default NewCardFormAll;\n","import style from '../moneyGuard.module.scss';\nimport { months, currentYear } from '../../helpers/timeInfo';\nimport ModalTime from '../ModalTime';\nimport { useEffect, useState } from 'react';\nimport DonutChart from '../../components/DonutChart';\n\nconst StatisticsAll = ({ info }) => {\n  const [isSelectedMonth, setIsSelectedMonth] = useState('-');\n  const [isSelectedYear, setIsSelectedYear] = useState(currentYear);\n  const [arrayMonthInSelectedYear, setArrayMonthInSelectedYear] = useState([]);\n  const [selectedMonthAndYear, setSelectedMonthAndYear] = useState([]);\n\n  const handleMonth = value => setIsSelectedMonth(value);\n  const handleYear = value => setIsSelectedYear(value);\n\n  useEffect(() => {\n    const selectedYear = info.filter(\n      info => Number(info.year) === Number(isSelectedYear)\n    );\n    const availableMonths = selectedYear.map(info => info.month);\n    const uniqueMonths = [...new Set(availableMonths)];\n    const filteredMonths = months.filter(month =>\n      uniqueMonths.includes(month.name)\n    );\n    filteredMonths.push({ number: '-', name: '-' });\n\n    setArrayMonthInSelectedYear(filteredMonths);\n  }, [isSelectedYear, info]);\n\n  useEffect(() => {\n    const arr = info.filter(\n      info => Number(info.year) === Number(isSelectedYear)\n    );\n    const filteredArr =\n      isSelectedMonth !== '-'\n        ? arr.filter(info => info.month === isSelectedMonth)\n        : arr;\n\n    setSelectedMonthAndYear(filteredArr);\n  }, [info, isSelectedMonth, isSelectedYear]);\n\n  const expensesArr =\n    selectedMonthAndYear.filter(transaction => transaction.expense) || [];\n  const expensesArrReducer = expensesArr.reduce((acc, item) => {\n    const { category, amount, color } = item;\n    const numericAmount = parseFloat(amount);\n    if (!acc[category]) {\n      acc[category] = {\n        total: 0,\n        color: color,\n      };\n    }\n    acc[category].total += numericAmount;\n    return acc;\n  }, {});\n\n  const cumulatedExpenes = Object.entries(expensesArrReducer)\n    .map(([category, data]) => ({\n      category,\n      total: data.total,\n      color: data.color,\n    }))\n    .sort((a, b) => b.total - a.total);\n\n  const infoReducer = selectedMonthAndYear.reduce(\n    (acc, item) => {\n      const category =\n        item.expense === true\n          ? 'expenses'\n          : item.expense === false\n          ? 'incomes'\n          : null;\n      if (!category) return acc;\n\n      const amount = parseFloat(item.amount);\n      acc[category] += amount;\n\n      return acc;\n    },\n    {\n      incomes: 0,\n      expenses: 0,\n    }\n  );\n\n  const filterYearsForSelection = info\n    .map(info => info.date.split('-')[0])\n    .filter((year, index, array) => array.indexOf(year) === index)\n    .sort((a, b) => a.localeCompare(b))\n    .map(year => {\n      return { number: year, name: year };\n    });\n\n  return (\n    <div className={style.statistics}>\n      <div className={style.leftSideStatistics}>\n        <h2>Expenses statistics</h2>\n        <ModalTime\n          initialValue={isSelectedYear}\n          infoPeriod={filterYearsForSelection}\n          handleYear={handleYear}\n          handleMonth={handleMonth}\n          name=\"years\"\n        />\n\n        <ModalTime\n          initialValue={isSelectedMonth}\n          infoPeriod={arrayMonthInSelectedYear}\n          handleMonth={handleMonth}\n          name=\"months\"\n        />\n\n        {infoReducer.expenses > 0 ? (\n          <div className={style.chartWrapper}>\n            <DonutChart info={cumulatedExpenes} />\n          </div>\n        ) : null}\n      </div>\n\n      <div className={style.rightSideStatistics}>\n        <div className={style.tableHeaderCategories}>\n          <span>Category</span>\n          <span>Sum</span>\n        </div>\n        {cumulatedExpenes.map(expense => {\n          return (\n            <div key={expense.category} className={style.tableRowsCategories}>\n              <div className={style.categoryWithColor}>\n                <span style={{ backgroundColor: `${expense.color}` }}></span>\n                <span>{expense.category}</span>\n              </div>\n              <span className={style.categoryAmount}>\n                {new Intl.NumberFormat('fr-FR').format(\n                  expense.total.toFixed(2)\n                )}\n              </span>\n            </div>\n          );\n        })}\n\n        <div className={style.totalCategories}>\n          <div className={style.totalIncomes}>\n            <span>Incomes:</span>\n            <span>\n              {new Intl.NumberFormat('fr-FR').format(\n                infoReducer.incomes.toFixed(2)\n              )}\n            </span>\n          </div>\n\n          <div className={style.totalExpenses}>\n            <span>Expenses:</span>\n            <span>\n              {new Intl.NumberFormat('fr-FR').format(\n                infoReducer.expenses.toFixed(2)\n              )}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StatisticsAll;\n\n/*\n\n\n\n        */\n","import style from '../moneyGuard.module.scss';\nimport currency from '../../helpers/currencyBNR';\nimport { useState, useEffect } from 'react';\nimport Balance from '../../components/Balance';\nimport CurrencyAll from './CurrencyAll';\nimport ListCardsAll from '../../components/TabletMobileDesign/ListCardsAll';\nimport ModalTimeAll from '../../components/TabletMobileDesign/ModalTimeAll';\nimport NavAll from '../../components/TabletMobileDesign/NavAll';\nimport NewCoinFormAll from './NewCoinFormAll';\nimport NewCardFormAll from './NewCardFormAll';\nimport { currentYear, currentMonthLetter } from '../../helpers/timeInfo';\nimport StatisticsAll from './StatisticsAll';\nimport Header from '../../components/Header';\n\nconst AllinOne = ({ info,setIsArr, handleDeleteCard }) => {\n\n  const currenciesLocalStorage = localStorage.getItem('moneyGuardCurrency');\n  const currenciesParces = JSON.parse(currenciesLocalStorage);\n  const [isHomeNavSelected, setIsHomeNavSelected] = useState(true);\n  const [isListCurrencies, setIsListCurrencies] = useState(\n    currenciesParces || currency\n  );\n  const [isNewCoinModalOn, setIsNewCoinModalOn] = useState(false);\n  const [isNewCardModalOn, setIsNewCardModalOn] = useState(false);\n  const [isIdForCoinUpdate, setIsIdForCoinUpdate] = useState('');\n  const [isIdForCardUpdate, setIsIdForCardUpdate] = useState('');\n  useEffect(() => {\n    localStorage.setItem(\n      'moneyGuardCurrency',\n      JSON.stringify(isListCurrencies)\n    );\n  }, [isListCurrencies]);\n\n  const handleAddNewCoin = value => {\n    if (!isIdForCoinUpdate) {\n      setIsListCurrencies(prev => [...prev, value]);\n    } else {\n      const findIndex = isListCurrencies.findIndex(\n        el => el.id === isIdForCoinUpdate\n      );\n      isListCurrencies.splice(findIndex, 1, value);\n      setIsListCurrencies(isListCurrencies);\n      setIsIdForCoinUpdate('');\n    }\n    \n    setIsNewCoinModalOn(prev => !prev);\n    \n  };\n\n  const [isYearMonthForFilter, setisYearMonthForFilter] = useState({\n    year: currentYear,\n    month: currentMonthLetter,\n  });\n  //\n\n  const handleYearMonth = value => setisYearMonthForFilter(value);\n  const handleNav = () => setIsHomeNavSelected(pre => !pre);\n  const handleAddCoinModal = () => setIsNewCoinModalOn(prev => !prev);\n  const handleIdForCoinUpdate = id => {\n    setIsIdForCoinUpdate(id);\n    handleAddCoinModal();\n  };\n  const handleIdForCardUpdate = id => setIsIdForCardUpdate(id);\n  const handleIdForCoinDel = id => {\n    const newListCurrency = isListCurrencies.filter(el => el.id !== id);\n    setIsListCurrencies(newListCurrency);\n    setIsIdForCoinUpdate('');\n  };\n  const handleAddCardModal = () => setIsNewCardModalOn(prev => !prev);\n\n  return (\n    <section className={style.allinOneWrapper}>\n      <section className={style.sharedLayoutWrapper}>\n        <Header  />\n      </section>\n      \n      <div className={style.notSharedLayout}>\n        <div className={style.allinOneContainerLeft}>\n          <div className={style.navAndBalance}>\n            <NavAll isHomeSelected={isHomeNavSelected} handleNav={handleNav} />\n\n            <div className={style.preBalance}>\n              <Balance info={info} />\n            </div>\n          </div>\n\n          <CurrencyAll\n            handleAddCoinModal={handleAddCoinModal}\n            listCurrencies={isListCurrencies}\n            handleIdForCoinUpdate={handleIdForCoinUpdate}\n            handleIdForCoinDel={handleIdForCoinDel}\n          />\n        </div>\n\n        <div className={style.allinOneContainerRight}>\n          {isHomeNavSelected ? (\n            <section className={style.homeSection}>\n              <ModalTimeAll info={info} handleYearMonth={handleYearMonth} />\n              <ListCardsAll\n                handleAddCardModal={handleAddCardModal}\n                handleDeleteCard={handleDeleteCard}\n                handleIdForCardUpdate={handleIdForCardUpdate}\n                info={info}\n                isYearMonthForFilter={isYearMonthForFilter}\n              />\n            </section>\n          ) : (\n            <section className={style.statisticsSection}>\n              <StatisticsAll\n                info={info}\n                handleYearMonth={handleYearMonth}\n                isYearMonthForFilter={isYearMonthForFilter}\n              />\n            </section>\n          )}\n        </div>\n\n        {isNewCoinModalOn ? (\n          <div className={style.newCoinFormAllModal}>\n            <NewCoinFormAll\n              handleAddNewCoin={handleAddNewCoin}\n              handleAddCoinModal={handleAddCoinModal}\n              isIdForCoinUpdate={isIdForCoinUpdate}\n              isListCurrencies={isListCurrencies}\n            />\n          </div>\n        ) : null}\n        {isNewCardModalOn ? (\n          <div className={style.newCardFormAllModal}>\n            <NewCardFormAll\n              handleIdForCardUpdate={handleIdForCardUpdate}\n              handleAddCardModal={handleAddCardModal}\n              info={info}\n              setIsArr={setIsArr}\n              isIdForCardUpdate={isIdForCardUpdate}\n            />\n          </div>\n        ) : null}\n\n      </div>\n    </section>\n  );\n};\n\nexport default AllinOne;\n","export const months = [\n  { number: '01', name: 'January' },\n  { number: '02', name: 'February' },\n  { number: '03', name: 'March' },\n  { number: '04', name: 'April' },\n  { number: '05', name: 'May' },\n  { number: '06', name: 'June' },\n  { number: '07', name: 'July' },\n  { number: '08', name: 'August' },\n  { number: '09', name: 'September' },\n  { number: '10', name: 'October' },\n  { number: '11', name: 'November' },\n  { number: '12', name: 'December' },\n];\nexport const years = [\n  { number: '2025', name: '2025' },\n  { number: '2026', name: '2026' },\n  { number: '2027', name: '2027' },\n  { number: '2028', name: '2028' },\n  { number: '2029', name: '2029' },\n  { number: '2030', name: '2030' },\n];\n\nexport const todayNewDate = new Date();\nexport const currentYear = todayNewDate.getFullYear();\nexport const currentMonth = (todayNewDate.getMonth() + 1).toString().padStart(2, '0');\nconst currentMonthFilter = months.filter(el => Number(el.number) === Number(currentMonth));\nexport const currentMonthLetter = currentMonthFilter[0].name;\nexport const currentDay = todayNewDate.getDate().toString().padStart(2, '0');\nexport const today = `${currentYear}-${currentMonth}-${currentDay}`;\n\n","import style from './moneyGuard.module.scss';\n\nconst Balance = ({ info }) => {\n  const balance = info.reduce((acc, data) => {\n    if (data.expense === false) {\n      return acc + Number(data.amount);\n    } else if (data.expense === true) {\n      return acc - Number(data.amount);\n    }\n    return acc;\n  }, 0);\n\n  return (\n    <div className={style.totalSum}>\n      <p> Balance: </p>\n      <p>\n        <span\n          style={{\n            color: balance <= 0 ? '#be242496' : 'rgb(194, 240, 126)',\n            fontWeight: 900,\n          }}\n        >\n          {' '}\n          {new Intl.NumberFormat('fr-FR').format(balance.toFixed(2))}\n        </span>\n        <span style={{marginLeft: \"10px\"}}>RON</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Balance;\n","import { PieChart, Pie, Cell, Tooltip } from 'recharts';\nimport style from './moneyGuard.module.scss';\n\nconst CustomTooltip = ({ active, payload, info }) => {\n  if (active && payload && payload.length) {\n    const { category, total, color } = payload[0].payload;\n    const totalSum = info.reduce((acc, item) => acc + item.total, 0);\n    const percentage = ((total / totalSum) * 100).toFixed(1);\n\n    return (\n      <div\n        style={{\n          background: '#1f1f1f',\n          padding: '8px 8px',\n          borderRadius: '10px',\n          color: '#fff',\n          border: `2px solid ${color}`,\n          boxShadow: '0 0 5px rgba(0,0,0,0.3)',\n        }}\n      >\n        <p style={{ margin: 0, fontWeight: 'bold', fontSize: '14px' }}>\n          {category}\n        </p>\n        <p style={{ margin: 0, fontSize: '14px' }}>{percentage}%</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst DonutChart = ({ info }) => {\n  const totalSum = info.reduce((acc, item) => acc + item.total, 0);\n\n  return (\n    <div\n      style={{ textAlign: 'center', width: '300px', margin: '0 auto', position:\"static\" }}\n      className={style.chart}\n    >\n\n      <div style={{ margin: '0 auto', position:\"relative\" }}>\n        <PieChart width={285} height={285} style={{ margin: '0 auto' }}>\n          <Pie\n            data={info}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={80}\n            outerRadius={140}\n            dataKey=\"total\"\n            nameKey=\"category\"\n          >\n            {info.map((entry, index) => (\n              <Cell style={{outline: 'none'}} key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip content={<CustomTooltip />} info={info} />\n        </PieChart>\n\n        {/* Center text */}\n        <div\n          style={{\n            position: 'absolute',\n            top: '120px',\n            left: '50%',\n            transform: 'translateX(-52%)',\n            fontWeight: '900',\n            fontSize: '30px',\n            color: 'rgba(255, 130, 130, 1)',\n            paddingLeft:\"10px\"\n          }}\n        >\n          {new Intl.NumberFormat('fr-FR').format(totalSum.toFixed(2))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DonutChart;\n"],"names":["_ref","infoPeriod","initialValue","name","handleMonth","handleYear","isModalOn","setisModalOn","useState","modalRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","_jsxs","className","style","statisticsPeriod","ref","children","concat","headerPeriodOff","headerPeriodOn","_jsx","type","onClick","e","preventDefault","prev","FaChevronUp","FaAngleDown","listPeriod","map","item","handleOptionSelect","value","nanoid","mainExpenses","color","mainIncomes","allCategories","id","currencyName","nbrRate","buyRate","sellRate","Logo","logoWrapper","src","alt","handleLogOutModal","sharedLayoutHeader","AddButton","addButtonAll","IoAddSharp","addButtonSVG","listCurrencies","handleAddCoinModal","handleIdForCoinUpdate","handleIdForCoinDel","fourDecimalsNumber","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","Number","preCurrencyTableAll","currencyTableAll","nonRate","withRate","el","smallBtn","paddingLeft","deletCurrency","MdDeleteOutline","editCurrency","MdOutlineModeEdit","info","isYearMonthForFilter","handleAddCardModal","handleDeleteCard","handleIdForCardUpdate","filteredInfoOnPeriod","filter","year","month","listCardsTabletContainer","width","piPlusMinusBold","PiPlusMinusBold","plusMinus","handleAddNewCard","card","cardDate","date","cardType","espense","ImPlus","imPlus","ImMinus","imMinus","cardCategory","category","cardDetails","details","cardAmount","amount","toFixed","cardButton","padding","idFrontend","handleYearMonth","isSelectedYear","setIsSelectedYear","currentYear","isSelectedMonth","setIsSelectedMonth","currentMonthLetter","isModalYearOn","setisModalYearOn","isModalMonthOn","setisModalMonthOn","modalRefYear","modalRefMonth","optionsYears","idx","arr","indexOf","optionsMonths","push","modalTimeSelect","years","handleOptionYear","_objectSpread","months","handleOptionMonth","isHomeSelected","handleNav","selectedNavAll","notSelectedNavAll","IoHomeSharp","ImStatsDots","valueBtn","bigBtnWithColor","handleModal","bigBtnNoColor","handleAddNewCoin","isIdForCoinUpdate","isListCurrencies","isCoin","setIsCoin","coinToBeUpdated","find","newCoinFormAll","onSubmit","alert","pattern","title","required","autoComplete","placeholder","onChange","toUpperCase","bigButtons","BigBtnWithColorAll","BigBtnNoColorAll","setIsArr","isIdForCardUpdate","isExpense","setIsExpense","isListCategoriesOn","setIsListCategoriesOn","isOption","setIsOption","isDate","setIsDate","today","isAmount","setIsAmount","isDetails","setIsDetails","isColor","setIsColor","monthLether","number","split","defaultCard","expense","selectedCard","arrCategory","buttonArrow","newCardContainer","newCardForm","async","responseFetch","fetch","method","headers","body","JSON","stringify","ok","Error","json","updatedInfo","filterCardBasedOnID","localStorage","setItem","error","console","message","newCardToggle","switch","checked","handleToggle","slider","round","rowFormNewCard","categorySelection","readOnly","rowFormNewCardElem2","newCardList","toLowerCase","newCardOption","input","identifyColor","handleOption","income","amountAndDateSelection","commentSelection","comment","maxLength","arrayMonthInSelectedYear","setArrayMonthInSelectedYear","selectedMonthAndYear","setSelectedMonthAndYear","availableMonths","uniqueMonths","Set","filteredMonths","includes","filteredArr","expensesArrReducer","transaction","reduce","acc","numericAmount","parseFloat","total","cumulatedExpenes","Object","entries","_ref2","data","sort","a","b","infoReducer","incomes","expenses","filterYearsForSelection","index","array","localeCompare","statistics","leftSideStatistics","ModalTime","chartWrapper","DonutChart","rightSideStatistics","tableHeaderCategories","tableRowsCategories","categoryWithColor","backgroundColor","categoryAmount","totalCategories","totalIncomes","totalExpenses","currenciesLocalStorage","getItem","currenciesParces","parse","isHomeNavSelected","setIsHomeNavSelected","setIsListCurrencies","currency","isNewCoinModalOn","setIsNewCoinModalOn","isNewCardModalOn","setIsNewCardModalOn","setIsIdForCoinUpdate","setIsIdForCardUpdate","setisYearMonthForFilter","allinOneWrapper","sharedLayoutWrapper","Header","notSharedLayout","allinOneContainerLeft","navAndBalance","NavAll","pre","preBalance","Balance","CurrencyAll","newListCurrency","allinOneContainerRight","homeSection","ModalTimeAll","ListCardsAll","statisticsSection","StatisticsAll","newCoinFormAllModal","NewCoinFormAll","findIndex","splice","newCardFormAllModal","NewCardFormAll","todayNewDate","Date","getFullYear","currentMonth","getMonth","toString","padStart","currentDay","getDate","balance","totalSum","fontWeight","marginLeft","CustomTooltip","active","payload","length","percentage","background","borderRadius","border","boxShadow","margin","fontSize","textAlign","position","chart","PieChart","height","Pie","cx","cy","innerRadius","outerRadius","dataKey","nameKey","entry","Cell","outline","fill","Tooltip","content","top","left","transform"],"sourceRoot":""}